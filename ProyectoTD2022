---
title: "ProyectoTD2022"
subtitle: Tratamiento de Datos. Grado en Ciencia de Datos- UV
author: "Andreu Cantó Belda, María Mañas Marín y Gabriel Val Ballester"
date:  "`r Sys.Date()`"

params:
  lang: ES
lang: "`r switch(params$lang, ES = 'es-ES', EN = 'en-US')`"

output:

  # pdf_document:
  #   toc: yes 
  #   toc_depth: 3 

  html_document:
    echo: yes
    number_sections: yes
    theme: lumen 
    toc: yes

  html_notebook:
    echo: yes
    number_sections: yes
    toc: yes

language:
  label:
    fig: 'Figura '
    tab: 'Tabla '
    eq: 'Ecuación '
    thm: 'Teorema '
    lem: 'Lema '
    def: 'Definición '
    cor: 'Corolario '
    prp: 'Proposición '
    exm: 'Ejemplo '
    exr: 'Ejercicio '
    proof: 'Demostración. '
    remark: 'Nota: '
    solution: 'Solución. '
---

# Introducción

Se usan rutas especificas a la carpeta data, que es la carpeta donde se encuentra la informacion del proyecto en 14 ficheros diferentes en relación a la contaminación acústica del barrio de Ruzafa.


# Configuración del los bloques (*Chunks*)

Cada bloque tiene muchos parámetros que pueden ser configurados

**include** = **FALSE** evita que el código y los resultados aparezcan en el archivo terminado. R Markdown aún ejecuta el código en el fragmento y los resultados pueden ser utilizados por otros fragmentos.

**echo = FALSE** evita que el código, pero no los resultados, aparezcan en el archivo terminado. Esta es una manera útil de incrustar figuras.

**message = FALSE** evita que los mensajes generados por el código aparezcan en el archivo finalizado.

**warning = FALSE** evita que las advertencias generadas por el código aparezcan en el final.

**fig.cap = "..."** agrega un título a los resultados gráficos.

Se pueden especificicar opciones generales por defecto en *opts_chunk\$set*

Más opciones en el enlace [\<https://bookdown.org/yihui/rmarkdown/\>](https://bookdown.org/yihui/rmarkdown/){.uri}

```{r setup, cache = F, echo = F, message = F, warning = F, tidy = F}


# CONFIGURACIÓN GENERAL
library(knitr)
options(width = 100)

# Opciones generales de los chucks. Se utilizarán salvo cambios en el chunk
opts_chunk$set(echo=F, message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 200, tidy = F, cache.path = '.cache/', fig.path = './figura/')

# Opciones generales de dígitos cuando se incluyen tablas
#options(xtable.type = 'html')
knit_hooks$set(inline = function(x) {
  
  if(is.numeric(x)) {
    round(x, getOption('digits'))
  } else {
    paste(as.character(x), collapse = ', ')
  }
})
#knit_hooks$set(plot = knitr:::hook_plot_html)
```

# Instalación automática de paquetes

Especificar las librerías necesarias para ejecutar el código en la variable ***packages***. Si no está instaladas, se instalarán y cargarán (solo para aquellas que están en el repositorio <http://cran.rediris.es>)

El siguiente bloque, al no especificar opciones del *chunk* usa la configuración por defecto.

```{r}

# Especificamos las librerías necesarias en esta lista

packages = c("tidyverse","knitr", 'dplyr', 'tidyr', 'VIM', 'patchwork')

#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(packages, FUN = function(x) {
  if (!require(x, character.only = TRUE)) {
    install.packages(x, dependencies = TRUE,repos='http://cran.rediris.es')
  }
  library(x, character.only = TRUE)
})

#verify they are loaded
search()

```


# Información

**‘data/Sueca_Esq_Denia.csv’** : Datos diarios del sensor de ruido ubicado en el barrio de Ruzafa, en la calle Sueca Esq. Denia

**‘data/Cadiz_16.csv’** : Datos diarios del sensor de ruido ubicado en el barrio de Ruzafa, en la calle Cádiz, 16

**‘data/Cadiz_3.csv’** : Datos diarios del sensor de ruido ubicado en el barrio de Ruzafa, en la calle Cádiz, 3

**‘data/Cuba_3.csv’** : Datos diarios del sensor de ruido ubicado en el barrio de Ruzafa, en la calle Cuba, 3

**‘data/Sueca_2.csv’** : Datos diarios del sensor de ruido ubicado en el barrio de Ruzafa, en la calle Sueca, 2

**‘data/Sueca_61.csv’** : Datos diarios del sensor de ruido ubicado en el barrio de Ruzafa, en la calle Sueca, 61

**‘data/Sueca_32.csv’** : Datos diarios del sensor de ruido ubicado en el barrio de Ruzafa, en la calle Sueca, 32

**‘data/Carles_Cervera_Chaflan_Reina_Donya_Maria.csv’** : Datos diarios del sensor de ruido ubicado en el barrio de Ruzafa, en la calle Carles Cervera, Chaflán Reina Doña María

**‘data/Salvador_Abril_Chaflan_Maestro_Jose_Serrano.csv’** : Datos diarios del sensor de ruido ubicado en el barrio de Ruzafa, en la calle Salvador Abril Chaflán Maestro José Serrano

**‘data/Vivons_Chaflan_Cadiz.csv’** : Datos diarios del sensor de ruido ubicado en el barrio de Ruzafa, en la calle Vivons Chaflán Cádiz

**‘data/Carles_Cervera_34.csv’** : Datos diarios del sensor de ruido ubicado en el barrio de Ruzafa, en la calle Carles Cervera, 34

**‘data/Puerto_Rico_21.csv’** : Datos diarios del sensor de ruido ubicado en el barrio de Ruzafa, en la calle Puerto Rico, 21

**‘data/Doctor_Serrano_21.csv’** : Datos diarios del sensor de ruido ubicado en el barrio de Ruzafa, en la calle Doctor Serrano, 21

**‘data/General_Prim_Chaflan_Donoso_Cortes.csv’** : Datos diarios del sensor de ruido ubicado en el barrio de Ruzafa, en la calle General Prim Chaflán Donoso Cortés


# Apertura de ficheros

Abrimos los archivos y los cargamos

```{r, echo = TRUE, message = FALSE, warning = FALSE, tidy = FALSE}

Cadiz_3 <- read_csv("data/Cadiz_3.csv")

Cadiz_16 <- read_csv("data/Cadiz_16.csv")

Carles_Cervera_34 <- read_csv("data/Carles_Cervera_34.csv")

Carles_Cervera_Chaflan_Reina_Donya_Maria <- read_csv("data/Carles_Cervera_Chaflan_Reina_Donya_Maria.csv")

Cuba_3 <- read_csv("data/Cuba_3.csv")

Doctor_Serrano_21 <- read_csv("data/Doctor_Serrano_21.csv")

General_Prim_Chaflan_Donoso_Cortes <- read_csv("data/General_Prim_Chaflan_Donoso_Cortes.csv")

Puerto_Rico_21 <- read_csv("data/Puerto_Rico_21.csv")

Salvador_Abril_Chaflan_Maestro_Jose_Serrano <- read_csv("data/Salvador_Abril_Chaflan_Maestro_Jose_Serrano.csv")

Sueca_2 <- read_csv("data/Sueca_2.csv")

Sueca_32 <- read_csv("data/Sueca_32.csv")

Sueca_61 <- read_csv("data/Sueca_61.csv")

Sueca_Esq_Denia <- read_csv("data/Sueca_Esq_Denia.csv")

Vivons_Chaflan_Cadiz <- read_csv("data/Vivons_Chaflan_Cadiz.csv")

```


# Preparacion de los datos

Todos los archivos leídos los pasamos a un formato tidy habiéndolos ordenado todos de la misma manera para posteriormente juntarlos todos en un mismo data frame y poder trabajar cómodamente con él.

Comenzamos creando una columna a cada data frame distinto que se guardará en la variable lugar, de manera que cuando las juntemos, la variable 'place' tendrá la información de todas las tablas

```{r, echo = TRUE, message = FALSE, warning = FALSE, tidy = FALSE}

Cadiz_3$Place = "Cadiz 3"
Cadiz_16$Place = "Cadiz 16"
Carles_Cervera_34$Place = "Carles Cervera 34"
Carles_Cervera_Chaflan_Reina_Donya_Maria$Place = "Carles Cervera Chaflan"
Cuba_3$Place = "Cuba 3"
Doctor_Serrano_21$Place = "Doctor Serrano"
General_Prim_Chaflan_Donoso_Cortes$Place = "General Prim"
Puerto_Rico_21$Place = "Puerto Rico 21"
Salvador_Abril_Chaflan_Maestro_Jose_Serrano$Place = "Salvador Abril"
Sueca_2$Place = "Sueca 2"
Sueca_32$Place = "Sueca 32"
Sueca_61$Place = "Sueca 61"
Sueca_Esq_Denia$Place = "Sueca esq Denia"
Vivons_Chaflan_Cadiz$Place = "Vivons Chaflan"


#Forzamos que los diferentes ficheros esten en un formato tidy

Cadiz_3 = Cadiz_3[c(1,12,2:11)]
Cadiz_3t = Cadiz_3 %>% gather(Ruido, Valor,8:length(Cadiz_3)-1)

Cadiz_16 = Cadiz_16[c(1,12,2:11)]
Cadiz_16t = Cadiz_16 %>% gather(Ruido, Valor,8:length(Cadiz_16)-1)

Carles_Cervera_34 = Carles_Cervera_34[c(1,12,2:11)]
Carles_Cervera_34t = Carles_Cervera_34 %>% gather(Ruido, Valor,8:length(Carles_Cervera_34)-1)

Carles_Cervera_Chaflan_Reina_Donya_Maria = Carles_Cervera_Chaflan_Reina_Donya_Maria[c(1,12,2:11)]
Carles_Cervera_Chaflan_Reina_Donya_Mariat = Carles_Cervera_Chaflan_Reina_Donya_Maria %>% gather(Ruido, Valor,8:length(Carles_Cervera_Chaflan_Reina_Donya_Maria)-1)

Cuba_3 = Cuba_3[c(1,12,2:11)]
Cuba_3t = Cuba_3 %>% gather(Ruido, Valor,8:length(Cuba_3)-1)

Doctor_Serrano_21 = Doctor_Serrano_21[c(1,12,2:11)]
Doctor_Serrano_21t = Doctor_Serrano_21 %>% gather(Ruido, Valor,8:length(Doctor_Serrano_21)-1)

General_Prim_Chaflan_Donoso_Cortes = General_Prim_Chaflan_Donoso_Cortes[c(1,12,2:11)]
General_Prim_Chaflan_Donoso_Cortest = General_Prim_Chaflan_Donoso_Cortes %>% gather(Ruido, Valor,8:length(General_Prim_Chaflan_Donoso_Cortes)-1)

Puerto_Rico_21 = Puerto_Rico_21[c(1,12,2:11)]
Puerto_Rico_21t = Puerto_Rico_21 %>% gather(Ruido, Valor,8:length(Puerto_Rico_21)-1)

Salvador_Abril_Chaflan_Maestro_Jose_Serrano = Salvador_Abril_Chaflan_Maestro_Jose_Serrano[c(1,12,2:11)]
Salvador_Abril_Chaflan_Maestro_Jose_Serranot = Salvador_Abril_Chaflan_Maestro_Jose_Serrano %>% gather(Ruido, Valor,8:length(Salvador_Abril_Chaflan_Maestro_Jose_Serrano)-1)

Sueca_2 = Sueca_2[c(1,12,2:11)]
Sueca_2t = Sueca_2 %>% gather(Ruido, Valor,8:length(Sueca_2)-1)

Sueca_32 = Sueca_32[c(1,12,2:11)]
Sueca_32t = Sueca_32 %>% gather(Ruido, Valor,8:length(Sueca_32)-1)

Sueca_61 = Sueca_61[c(1,12,2:11)]
Sueca_61t = Sueca_61 %>% gather(Ruido, Valor,8:length(Sueca_61)-1)

Sueca_Esq_Denia = Sueca_Esq_Denia[c(1,12,2:11)]
Sueca_Esq_Deniat = Sueca_Esq_Denia %>% gather(Ruido, Valor,8:length(Sueca_Esq_Denia)-1)

Vivons_Chaflan_Cadiz = Vivons_Chaflan_Cadiz[c(1,12,2:11)]
Vivons_Chaflan_Cadizt = Vivons_Chaflan_Cadiz %>% gather(Ruido, Valor,8:length(Vivons_Chaflan_Cadiz)-1)

```

# Fusionamos todos los datos en un solo dataframe

Fusionamos todos los dataframes para trabajar cómodamente con los datos.

Después de fusionarlo, eliminamos las columnas prescindibles, estas son:

- _id, que no aporta ninguna información\
- recvTime, que no aporta ninguna información\
- fiwareServicePath, que en todas las filas tiene el mismo valor (/sonometros)\
- entityType, que en todas las filas tiene el mismo valor (NoiseLevelObserved)\

```{r, echo = TRUE, message = FALSE, warning = FALSE, tidy = FALSE}
df <- rbind(Cadiz_3t, Cadiz_16t, Carles_Cervera_34t, Carles_Cervera_Chaflan_Reina_Donya_Mariat, Cuba_3t, Doctor_Serrano_21t, General_Prim_Chaflan_Donoso_Cortest, Puerto_Rico_21t, Salvador_Abril_Chaflan_Maestro_Jose_Serranot, Sueca_2t, Sueca_32t, Sueca_61t, Sueca_Esq_Deniat, Vivons_Chaflan_Cadizt)

# Comprobamos si hay información irrelevante
df %>% filter(fiwareServicePath != '/sonometros')
df %>% filter(entityType != 'NoiseLevelObserved')

# Las columnas _id, fiwareServicePath, recvTime y entityType no aportan información.
dff <- df %>% select(-1, -fiwareServicePath, -entityType, -recvTime)

str(dff)

# Guardamos cada variable con el tipo de dato que le corresponde
dff <- dff %>% mutate(Place = as.factor(Place), entityId = as.factor(entityId), dateObserved = as.POSIXlt(dateObserved), Ruido = as.factor(Ruido))

```

Después de todos estos cambios, tenemos com resultado un dataset con las siguientes variables:

-**Place**, Lugar de medición\
-**entityld**, Identificador único del sensor en la plataforma VLCi\
-**dateObserved**, Día al que se refieren las medidas\
-**Ruido**, Tipo de ruido que se mide\
-**Valor**, Valor del ruido que se mide\


# Valores perdidos

Conocer los valores perdidos es importante porque indican cuánto desconocemos sobre nuestros datos. A menudo, no es aconsejable hacer inferencias basadas en unos pocos casos. Además, tendremos en cuenta los valores que aparezcan para la respuesta a las preguntas que nos plantearemos a continuación.

```{r}
aggr(dff, prop = FALSE, combined = TRUE, numbers = TRUE, sortVars = TRUE, sortCombs = TRUE)
```

Podemos ver en el grafico que hay 0 valores perdidos en la columna de valor.

```{r}
sum(is.na(dff$Valor))
```
Otra forma de calcular los NA es hacer un sumatorio de NAs por columnas.
Observamos que no hay valores perdidos en la toma de datos, asumiendo que si los existiera, correspondría con dias en los que no se han tomado las medidas de contaminacion acústica.


# Utilidad de los datos

Teniendo la informacion toda compacta podemos plantearnos una serie de preguntas. El objetivo de esto es tener informacion más fiable sobre la pregunta en particular.
Usaremos funciones de la libreria dpylr para obtener la informacion que nos complazca para responder a las preguntas

Pero antes, definiremos un vector de los ruidos que utilizaremos en nuestro análisis

```{r}
ruidos = unique(dff$Ruido)
ruidos = c("LAeq", "LAeq_d", "LAeq_n", "LAeq_e", "LAeq_den")
```

Correspondiendo cada uno de ellos con: 

-**LAeq**: Nivel sonoro continuo equivalente. En este caso el período establecido para este sensor es de 1 minuto.\

-**LAeq_d**: Es un indicador de ruido asociado al día.\

-**LAeq_e**: Es un indicador del nivel sonoro durante la tarde.\

-**LAeq_n**: Es un indicador del nivel sonoro durante la noche.\

-**LAeq_den**: índice de ruido día-tarde-noche, es utilizado para determinar la molestia vinculada a la exposición al ruido.\


- ¿Qué mes es el más contaminante?\
MesContaminante %>% ggplot(aes(x = Mes, y = Valor, fill = Mes)) + geom_boxplot() + labs(title = paste0("Densidad del ruido ",sep="")) + facet_wrap(~Ruido, scales = "free")
```{r}
MesContaminante = dff %>% filter(Ruido %in% ruidos) %>% separate(dateObserved, c("Año","Mes","Dia"))

MesContaminante %>% ggplot(aes(x = Mes, y = Valor, fill = Mes)) + geom_boxplot() + labs(title = paste0("Densidad del ruido ",sep="")) + facet_wrap(~Ruido, scales = "free")


```
Podemos ver en cada grafica un indicador de ruido diferente para hacer el estudio del mes con más volumen de ruido en la ciudad de Valencia, en las diferentes zonas con medidores de contaminación acústica.
En relación a todos los indicadores de ruido, por minuto, en días, tardes y noches, se observa que el mes en el que más contaminación acústica tiene la ciudad es Marzo, coincidiendo con la festividad de Fallas, que conlleva actos multitudinarios, pirotécnias y música en altos niveles.


- ¿En festivos se contamina más?\
Como festivos entendemos como aquellos periodos donde no es dia laborqable y por tanto no se trabaja.
```{r}
MesContaminante = dff %>% filter(Ruido %in% ruidos) %>% separate(dateObserved, c("Año","Mes","Dia"))
fest <- dff %>% separate(dateObserved, c("Anyo","Mes","Dia"))
fest <- fest %>% mutate(Anyo = as.integer(Anyo), Mes = as.integer(Mes), Dia = as.integer(Dia))

for (i in 1:dim(fest[1])){
  if (((fest[i, 'Mes']) == 1) & ((fest[i, 'Dia']) == 1 | (fest[i, 'Dia']) == 6 |(fest[i,'Dia']) == 22)){fest[i,"Festivo"]<-"Fest"
  }
  else {if (((fest[i, 'Mes']) == 3) & (fest[i, 'Dia']) == 19) 
  {fest[i,"Festivo"]<-"Fest"}
  else{if (((fest[i, 'Mes']) == 4) & ((fest[i, 'Dia']) == 15 | (fest[i, 'Dia']) == 18 | (fest[i, 'Dia']) == 25)){fest[i,"Festivo"]<-"Fest"
  }
  else{if (((fest[i, 'Mes']) == 5) & (fest[i, 'Dia']) == 2)  {fest[i,"Festivo"]<-"Fest"
  }
  else{if (((fest[i, 'Mes']) == 6) & (fest[i, 'Dia']) == 24) {fest[i,"Festivo"]<-"Fest" 
  }
  else{if (((fest[i, 'Mes']) == 8) & (fest[i, 'Dia']) == 15) {fest[i,"Festivo"]<-"Fest" 
  }
  else{ if (((fest[i, 'Mes']) == 10) & (fest[i, 'Dia']) == 12) {fest[i,"Festivo"]<-"Fest" 
  }
  else{ if (((fest[i, 'Mes']) == 11) & (fest[i, 'Dia']) == 1) {fest[i,"Festivo"]<-"Fest" 
  }
  else{if (((fest[i, 'Mes']) == 12) & ((fest[i, 'Dia']) == 6 | (fest[i, 'Dia']) ==                 8)){fest[i,"Festivo"]<-"Fest" }
  else{
    fest[i,"Festivo"]<-"No fest"
  }
  
      }
    }
  }  
  }
  }
  }
  }
  }
}
fest %>% arrange(desc(Valor)) %>% head()
# Suprimimos los datos erroneos

fest <- fest %>% filter(Valor != Inf)
```

```{r}
fest %>% group_by(Festivo) %>% summarize(Media = mean(Valor, na.rm = T)) %>% 
  ggplot(aes(x = Festivo, y = Media, fill = Festivo)) + geom_bar(stat = 'identity') + ggtitle('Media de ruido si es festivo o no')

amd <- amd %>% 
  mutate(Anyo = as.factor(Anyo))

g2020<- fest %>%
  filter(Anyo == 2020) %>% 
  group_by(Festivo) %>% 
  summarize(m = mean(Valor)) %>% 
  ggplot(aes(x = Festivo, y = m, fill = Festivo)) + geom_bar(stat = 'identity') + ggtitle('Media dB 2020')

g2021 <- fest %>%
  filter(Anyo == 2021) %>% 
  group_by(Festivo) %>% 
  summarize(m = mean(Valor)) %>% 
  ggplot(aes(x = Festivo, y = m, fill = Festivo)) + geom_bar(stat = 'identity') + ggtitle('Media dB 2021')

g2022 <- fest %>%
  filter(Anyo == 2022) %>% 
  group_by(Festivo) %>% 
  summarize(m = mean(Valor)) %>% 
  ggplot(aes(x = Festivo, y = m, fill = Festivo)) + geom_bar(stat = 'identity') + ggtitle('Media dB 2022')

g2020 + g2021 + g2022

filter(fest, Valor > quantile(fest$Valor, prob = 0.999))
```
Como podemos observar no hay apenas diferencia entre cuando  es festivo o no,lo que tiene su sentido ya que en estos dias se compensa la falta de actividad laborable con la actividad que la gente puede hacer fuera de sus casas.
- ¿El covid-19 ha afectado de alguna manera a la contaminación?\
```{r}

```

- ¿Que estación del año es en la que menos se contamina?\
```{r}
amd <- dff %>% separate(dateObserved, c("Anyo","Mes","Dia"))
amd <- amd %>% mutate(Anyo = as.integer(Anyo), Mes = as.integer(Mes), Dia = as.integer(Dia))

for (i in 1:dim(amd[1])){
  if (((amd[i, 'Mes']) >= 7 & (amd[i, 'Mes']) <= 8) | ((amd[i, 'Mes']) == 6 & (amd[i, 'Dia']) >= 21) | ((amd[i, 'Mes']) == 9 & (amd[i, 'Dia']) < 23)){
    amd[i, 'Estacion'] <- 'Ver'
  } else {
    if (((amd[i, 'Mes']) >= 10 & (amd[i, 'Mes']) <= 11) | ((amd[i, 'Mes']) == 9 & (amd[i, 'Dia']) >= 23) | ((amd[i, 'Mes']) == 12 & (amd[i, 'Dia']) < 21)){
      amd[i, 'Estacion'] <- 'Ot'
    } else {
      if (((amd[i, 'Mes']) >= 1 & (amd[i, 'Mes']) <= 2) | ((amd[i, 'Mes']) == 12 & (amd[i, 'Dia']) >= 21) | ((amd[i, 'Mes']) == 3 & (amd[i, 'Dia']) < 20)){
        amd[i, 'Estacion'] <-  'Inv'
      } else {
        amd[i, 'Estacion'] <-  'Pri'
      }
    }
  }
}
amd %>% arrange(desc(Valor)) %>% head()
# Suprimimos los datos erroneos

amd <- amd %>% filter(Valor != Inf)
```


```{r}
amd %>% group_by(Estacion) %>% summarize(Media = mean(Valor, na.rm = T)) %>% 
  ggplot(aes(x = Estacion, y = Media, fill = Estacion)) + geom_bar(stat = 'identity') + ggtitle('Media de ruido por estación')

amd <- amd %>% 
  mutate(Anyo = as.factor(Anyo))

g2020<- amd %>%
  filter(Anyo == 2020) %>% 
  group_by(Estacion) %>% 
  summarize(m = mean(Valor)) %>% 
  ggplot(aes(x = Estacion, y = m, fill = Estacion)) + geom_bar(stat = 'identity') + ggtitle('Media dB 2020')

g2021 <- amd %>%
  filter(Anyo == 2021) %>% 
  group_by(Estacion) %>% 
  summarize(m = mean(Valor)) %>% 
  ggplot(aes(x = Estacion, y = m, fill = Estacion)) + geom_bar(stat = 'identity') + ggtitle('Media dB 2021')

g2022 <- amd %>%
  filter(Anyo == 2022) %>% 
  group_by(Estacion) %>% 
  summarize(m = mean(Valor)) %>% 
  ggplot(aes(x = Estacion, y = m, fill = Estacion)) + geom_bar(stat = 'identity') + ggtitle('Media dB 2022')

g2020 + g2021 + g2022

filter(amd, Valor > quantile(amd$Valor, prob = 0.999))
```
Como podemos ver, en líneas generales todas la estaciones suelen tener una media de ruido parecida estando el verano un escalón por encima. Algo también a destacar es la disparidad que encontramos en el año 2021 donde el ruido captado en verano es mayor que en el resto de estaciones esto es debido a que en 2021 las fallas se celebraron a principios de septiembre.
